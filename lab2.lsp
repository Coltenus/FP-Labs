(defun append-two-elements (lst el1 el2)
    (append lst (cond
        ((and (not (null el1)) (null el2)) (list el1))
        ((null el1) nil)
        (t (list el1 el2))
    ))
)

(defun remove-even-pair-func (lst1 lst2 ind)
    (let ((ret lst2) (rest (mod ind 4)))
        (if (= rest 2)
            (if (null (nth (+ ind 2) lst1))
                ret
                (remove-even-pair-func lst1 ret (+ ind 2))
            )
            (if (null (nth (+ ind 2) lst1))
                (append-two-elements ret (nth ind lst1) (nth (1+ ind) lst1))
                (remove-even-pair-func lst1 (append-two-elements ret (nth ind lst1) (nth (1+ ind) lst1)) (+ ind 2))
            )
        )
    )
)

(defun remove-even-pair (lst)
    (remove-even-pair-func lst nil 0)
)

(defun check-remove (name input expected)
    (format t "~:[FAILED~;passed~]... ~a~%"
    (equal (remove-even-pair input) expected)
    name))

(defun test-remove ()
    (format t "Running tests for remove-even-pair...~%")
    (check-remove "Test 1" '(1 2 3 4 5 6 7 8 9 10) '(1 2 5 6 9 10))
    (check-remove "Test 2" '(1 a 2 b 3 c 4) '(1 A 3 C))
    (check-remove "Test 3" '() '())
    (check-remove "Test 4" '(a b (c d) e (12 3) 4 5) '(a b (12 3) 4))
)

(test-remove)

(defun find-deepest-list-func (lst deep)
    (let ((max-depth deep) (max-depth-list lst))
        (if (and (not (null (car lst))) (listp (car lst)))
            (let ((buffer-list (find-deepest-list-func (car lst) (+ deep 1))))
                (if (> (nth 0 buffer-list) max-depth)
                    (and (setq max-depth (nth 0 buffer-list))
                    (setq max-depth-list (nth 1 buffer-list)))
                )
            )
        )
        (if (not (null lst))
            (let ((buffer-list (find-deepest-list-func (cdr lst) deep)))
                (if (> (nth 0 buffer-list) max-depth)
                    (and (setq max-depth (nth 0 buffer-list))
                    (setq max-depth-list (nth 1 buffer-list)))
                )
            )
        )
        (list max-depth max-depth-list)
    )
)

(defun find-deepest-list (lst)
    (nth 1 (find-deepest-list-func lst 0))
)

(defun check-find (name input expected)
    (format t "~:[FAILED~;passed~]... ~a~%"
    (equal (find-deepest-list input) expected)
    name))

(defun test-find ()
    (format t "Running tests for find-deepest-list...~%")
    (check-find "Test 1" '(1 (2 (3) 4) 5) '(3))
    (check-find "Test 2" '(1 2 3 4 5) '(1 2 3 4 5))
    (check-find "Test 3" '(1 (2 (3 (4 (5))))) '(5))
    (check-find "Test 4" '() '())
    (check-find "Test 5" '(1 2 3 4 5 (6 7 8 9 10)) '(6 7 8 9 10))
)

(test-find)