(defun split-string (str sep &key (buffer "") (lst nil))
    (if (not (stringp sep))
        (error "Invalid separator")
    )
    (if (not (stringp str))
        (error "Invalid string")
    )
    (if (not (stringp buffer))
        (error "Invalid buffer")
    )
    (if (and str (> (length str) 0) (not (and (= (length str) 1) (char= (char str 0) #\Return))))
        (progn
            (if (and (>= (length str) (length sep)) (string= (subseq str 0 (length sep)) sep))
                (progn
                    (setq lst (append lst (list buffer)))
                    (setq buffer "")
                    (setq str (subseq str (1- (length sep)))))
                (setq buffer (concatenate 'string buffer (subseq str 0 1)))
            )
            (split-string (subseq str 1) sep :buffer buffer :lst lst))
        (append lst (list buffer))
    )
)

(defun select (file-name keyword &key (lst '()))
    "Read the contents of a file into a list of strings."
    (lambda (&key (counter nil) (start 1) (end nil) (assoc-pos nil) (assoc-neg nil))
        (setq lst '())
        (setq counter 0)
        (if (or (null start) (<= start 0))
            (error "Invalid start value")
        )
        (if (and end (or (< end start)))
            (error "Invalid end value")
        )
        (with-open-file (stream file-name :direction :input :if-does-not-exist :error)
            (do ((line (read-line stream nil) (read-line stream nil)))
                ((null line) nil)
                (if (and end (= counter end))
                    (return)
                )
                (if (>= counter start)
                    (let ((lst-split (split-string line ",")) (assoc-lst nil))
                        (case keyword
                            (:company (if (= (length lst-split) 5)
                                    (progn
                                        (setq assoc-lst nil)
                                        (setq assoc-lst (acons :id (parse-integer (nth 0 lst-split)) assoc-lst))
                                        (setq assoc-lst (acons :name (nth 1 lst-split) assoc-lst))
                                        (setq assoc-lst (acons :country (nth 2 lst-split) assoc-lst))
                                        (setq assoc-lst (acons :type (nth 3 lst-split) assoc-lst))
                                        (setq assoc-lst (acons :founded (nth 4 lst-split) assoc-lst))
                                    )
                                    (error "Invalid company data")
                                )
                            )
                            (:spaceship (if (= (length lst-split) 5)
                                    (progn 
                                        (setq assoc-lst nil)
                                        (setq assoc-lst (acons :id (parse-integer (nth 0 lst-split)) assoc-lst))
                                        (setq assoc-lst (acons :name (nth 1 lst-split) assoc-lst))
                                        (setq assoc-lst (acons :company (parse-integer (nth 2 lst-split)) assoc-lst))
                                        (setq assoc-lst (acons :mission-type (nth 3 lst-split) assoc-lst))
                                        (setq assoc-lst (acons :first-launch-date (nth 4 lst-split) assoc-lst))
                                    )
                                    (error "Invalid spaceship data")
                                )
                            )
                            (t (error "Invalid keyword"))
                        )
                        (let ((result t))
                            (if (and (null assoc-pos) (null assoc-neg))
                                (setq result t)
                                (loop for val in assoc-lst do
                                    (let ((pos-val (assoc (car val) assoc-pos)) (neg-val (assoc (car val) assoc-neg)))
                                        (if (and pos-val (not (equalp (cdr val) (cdr pos-val))))
                                            (setq result nil)
                                        )
                                        (if (and neg-val (equalp (cdr val) (cdr neg-val)))
                                            (setq result nil)
                                        )
                                        (if (not result)
                                            (return)
                                        )
                                    )
                                )
                            )
                            (if result
                                (setq lst (append lst (list assoc-lst)))
                            )
                        )
                    )
                )
                (incf counter)
            )
        )
        lst
    )
)

(defun print-data (csv-data keyword &key (text nil))
    (if (not (listp csv-data))
        (error "Invalid CSV data")
    )
    (if (and text (not (stringp text)))
        (error "Invalid text")
    )
    (if text
        (format t "~a~%" text)
    )
    (case keyword
        (:company (format t "~3a ~16a ~12a ~16a ~a~%" "ID" "Name" "Country" "Type" "Founded"))
        (:spaceship (format t "~3a ~16a ~7a ~16a ~a~%" "ID" "Name" "Company" "Mission Type" "First Launch Date"))
        (t (error "Invalid keyword"))
    )
    (loop for row in csv-data do
        (case keyword
            (:company (format t "~3d ~16a ~12a ~16a ~a" (cdr (assoc :id row))
                                                (cdr (assoc :name row))
                                                (cdr (assoc :country row))
                                                (cdr (assoc :type row))
                                                (cdr (assoc :founded row)))
            )
            (:spaceship (format t "~3d ~16a ~7d ~16a ~a" (cdr (assoc :id row))
                                                    (cdr (assoc :name row))
                                                    (cdr (assoc :company row))
                                                    (cdr (assoc :mission-type row))
                                                    (cdr (assoc :first-launch-date row)))
            )
            (t (error "Invalid keyword"))
        )
        (format t "~%")
    )
    (format t "~%")
)

(defun print-spaceship (id spaceships companies)
    (if (not (listp spaceships))
        (error "Invalid spaceships data")
    )
    (if (not (listp companies))
        (error "Invalid companies data")
    )
    (let ((spaceship nil))
        (loop for row in spaceships do
            (if (= id (cdr (assoc :id row)))
                (setq spaceship row)
            )
            (if spaceship
                (return)
            )
        )
        (if spaceship
            (progn
                (format t "Spaceship ID: ~a~%" (cdr (assoc :id spaceship)))
                (format t "Spaceship: ~a~%" (cdr (assoc :name spaceship)))
                (format t "Company: ")
                (let ((company nil))
                    (loop for r in companies do
                        (if (= (cdr (assoc :company spaceship)) (cdr (assoc :id r)))
                            (setq company r)
                        )
                        (if company
                            (return)
                        )
                    )
                    (if company
                        (format t "~a~%" (cdr (assoc :name company)))
                        (format t "not found~%")
                    )
                )
                (format t "Mission Type: ~a~%" (cdr (assoc :mission-type spaceship)))
                (format t "First Launch Date: ~a~%" (cdr (assoc :first-launch-date spaceship)))
            )
            (format t "Spaceship with ID ~a not found~%" id)
        )
        (format t "~%")
    )
)

(defun print-company (id companies spaceships)
    (if (not (listp companies))
        (error "Invalid companies data")
    )
    (if (not (listp spaceships))
        (error "Invalid spaceships data")
    )
    (let ((company nil))
        (loop for row in companies do
            (if (= id (cdr (assoc :id row)))
                (setq company row)
            )
            (if company
                (return)
            )
        )
        (if company
            (progn
                (format t "Company ID: ~a~%" (cdr (assoc :id company)))
                (format t "Company: ~a~%" (cdr (assoc :name company)))
                (format t "Country: ~a~%" (cdr (assoc :country company)))
                (format t "Type: ~a~%" (cdr (assoc :type company)))
                (format t "Founded: ~a~%" (cdr (assoc :founded company)))
                (format t "Spaceships: ")
                (let ((spships '()))
                    (loop for s in spaceships do
                        (if (= (cdr (assoc :id company)) (cdr (assoc :company s)))
                            (setq spships (append spships (list s)))
                        )
                    )
                    (if spships
                        (progn
                            (format t "~a" (cdr (assoc :name (nth 0 spships))))
                            (loop for i from 1 to (1- (length spships)) do
                                (format t ", ~a" (cdr (assoc :name (nth i spships)))))
                        )
                        (format t "not found")
                    )
                )
                (format t "~%")
            )
            (format t "Company with ID ~a not found~%" id)
        )
        (format t "~%")
    )
)

(defun save-data (data file-name keyword)
    (if (not (listp data))
        (error "Invalid data")
    )
    (if (not (stringp file-name))
        (error "Invalid file name")
    )
    (with-open-file (stream file-name :direction :output :if-exists :supersede)
        (case keyword
            (:company (format stream "ID,Name,Country,Type,Founded"))
            (:spaceship (format stream "ID,Name,Company ID,Mission Type,First Launch Date"))
            (t (error "Invalid keyword"))
        )
        (if (> (length data) 0)
            (progn
                (format stream "~%")
                (case keyword
                    (:company (format stream "~d,~a,~a,~a,~a" (cdr (assoc :id (nth 0 data)))
                                                            (cdr (assoc :name (nth 0 data)))
                                                            (cdr (assoc :country (nth 0 data)))
                                                            (cdr (assoc :type (nth 0 data)))
                                                            (cdr (assoc :founded (nth 0 data))))
                    )
                    (:spaceship (format stream "~d,~a,~d,~a,~a" (cdr (assoc :id (nth 0 data)))
                                                            (cdr (assoc :name (nth 0 data)))
                                                            (cdr (assoc :company (nth 0 data)))
                                                            (cdr (assoc :mission-type (nth 0 data)))
                                                            (cdr (assoc :first-launch-date (nth 0 data))))
                    )
                    (t (error "Invalid keyword"))
                )
                (loop for i from 1 to (1- (length data)) do
                    (format stream "~%")
                    (case keyword
                        (:company (format stream "~d,~a,~a,~a,~a" (cdr (assoc :id (nth i data)))
                                                                (cdr (assoc :name (nth i data)))
                                                                (cdr (assoc :country (nth i data)))
                                                                (cdr (assoc :type (nth i data)))
                                                                (cdr (assoc :founded (nth i data))))
                        )
                        (:spaceship (format stream "~d,~a,~d,~a,~a" (cdr (assoc :id (nth i data)))
                                                                (cdr (assoc :name (nth i data)))
                                                                (cdr (assoc :company (nth i data)))
                                                                (cdr (assoc :mission-type (nth i data)))
                                                                (cdr (assoc :first-launch-date (nth i data))))
                        )
                        (t (error "Invalid keyword"))
                    )
                )
            )
        )
    )
)

(defun add-row (data row keyword &key (assoc-pos nil) (assoc-neg nil))
    (if (not (listp data))
        (error "Invalid data")
    )
    (if (not (listp row))
        (error "Invalid row")
    )
    (if (not (keywordp keyword))
        (error "Invalid keyword")
    )
    (let ((exists nil))
        (loop for r in data do
            (if (= (cdr (assoc :id r)) (car row))
                (setq exists t)
            )
        )
        (if (not exists)
            (let ((assoc-lst nil))
                (case keyword
                    (:company (if (= (length row) 5)
                            (progn
                                (setq assoc-lst nil)
                                (setq assoc-lst (acons :id (car row) assoc-lst))
                                (setq assoc-lst (acons :name (nth 1 row) assoc-lst))
                                (setq assoc-lst (acons :country (nth 2 row) assoc-lst))
                                (setq assoc-lst (acons :type (nth 3 row) assoc-lst))
                                (setq assoc-lst (acons :founded (nth 4 row) assoc-lst))
                            )
                            (error "Invalid company data")
                        )
                    )
                    (:spaceship (if (= (length row) 5)
                            (progn 
                                (setq assoc-lst nil)
                                (setq assoc-lst (acons :id (car row) assoc-lst))
                                (setq assoc-lst (acons :name (nth 1 row) assoc-lst))
                                (setq assoc-lst (acons :company (nth 2 row) assoc-lst))
                                (setq assoc-lst (acons :mission-type (nth 3 row) assoc-lst))
                                (setq assoc-lst (acons :first-launch-date (nth 4 row) assoc-lst))
                            )
                            (error "Invalid spaceship data")
                        )
                    )
                    (t (error "Invalid keyword"))
                )
                (let ((result t))
                    (if (and (null assoc-pos) (null assoc-neg))
                        (setq result t)
                        (loop for val in assoc-lst do
                            (let ((pos-val (assoc (car val) assoc-pos)) (neg-val (assoc (car val) assoc-neg)))
                                (if (and pos-val (not (equalp (cdr val) (cdr pos-val))))
                                    (setq result nil)
                                )
                                (if (and neg-val (equalp (cdr val) (cdr neg-val)))
                                    (setq result nil)
                                )
                                (if (not result)
                                    (return)
                                )
                            )
                        )
                    )
                    (if result
                        (setq data (append data (list assoc-lst)))
                    )
                )
            )
        )
    )
    data
)

(defun delete-row (data id keyword)
    (if (not (listp data))
        (error "Invalid data")
    )
    (if (not (integerp id))
        (error "Invalid ID")
    )
    (if (not (keywordp keyword))
        (error "Invalid keyword")
    )
    (if (not (or (eq keyword :company) (eq keyword :spaceship)))
        (error "Invalid keyword")
    )
    (let ((exists nil))
        (loop for r in data do
            (if (= (cdr (assoc :id r)) id)
                (setq exists t)
            )
        )
        (if exists
            (setq data (remove-if (lambda (x) (= (cdr (assoc :id x)) id)) data))
        )
    )
    data
)

(defun convert-assoc-hash (lst)
    (let ((result '()))
        (loop for row in lst do
            (let ((hash (make-hash-table)))
                (loop for val in row do
                    (setf (gethash (intern (symbol-name (car val))) hash) (cdr val))
                )
                (setq result (append result (list hash)))
            )
        )
        result
    )
)

(defun print-data-hash (data keyword &key (text nil))
    (if (not (listp data))
        (error "Invalid data")
    )
    (if (and text (not (stringp text)))
        (error "Invalid text")
    )
    (if text
        (format t "~a~%" text)
    )
    (case keyword
        (:company (format t "~3a ~16a ~12a ~16a ~a~%" "ID" "Name" "Country" "Type" "Founded"))
        (:spaceship (format t "~3a ~16a ~7a ~16a ~a~%" "ID" "Name" "Company" "Mission Type" "First Launch Date"))
        (t (error "Invalid keyword"))
    )
    (loop for row in data do
        (case keyword
            (:company (format t "~3d ~16a ~12a ~16a ~a" (gethash 'id row)
                                                (gethash 'name row)
                                                (gethash 'country row)
                                                (gethash 'type row)
                                                (gethash 'founded row))
            )
            (:spaceship (format t "~3d ~16a ~7d ~16a ~a" (gethash 'id row)
                                                    (gethash 'name row)
                                                    (gethash 'company row)
                                                    (gethash 'mission-type row)
                                                    (gethash 'first-launch-date row))
            )
            (t (error "Invalid keyword"))
        )
        (format t "~%")
    )
    (format t "~%")
)

(defun check-output (fn name &key (first nil))
  (let ((captured-output
         (with-output-to-string (*standard-output*)
           (funcall fn))) (buffer ""))
        (if first
            (with-open-file (stream (format nil "./~a-output.txt" name) :direction :output :if-exists :supersede)
                (format stream "~a" captured-output)
            ))
        (with-open-file (stream (format nil "./~a-output.txt" name) :direction :input :if-does-not-exist :error)
            (do ((line (read-line stream nil) (read-line stream nil)))
                ((null line) nil)
                (setq buffer (format nil "~a~a~%" buffer line))
            )
        )
        (format t "~:[FAILED~;passed~]... ~a~%" (string= captured-output buffer) name))
)

(defun check-saved-file (file-name name &key (first nil))
    (let ((buffer1 "") (buffer2 ""))
        (with-open-file (stream file-name :direction :input :if-does-not-exist :error)
            (do ((line (read-line stream nil) (read-line stream nil)))
                ((null line) nil)
                (setq buffer1 (format nil "~a~a" buffer1 line))
            )
        )
        (if first
            (with-open-file (stream (format nil "./~a-output.txt" name) :direction :output :if-exists :supersede)
                (format stream "~a" buffer1)
            ))
        (with-open-file (stream (format nil "./~a-output.txt" name) :direction :input :if-does-not-exist :error)
            (do ((line (read-line stream nil) (read-line stream nil)))
                ((null line) nil)
                (setq buffer2 (format nil "~a~a" buffer2 line))
            )
        )
        (format t "~:[FAILED~;passed~]... ~a~%" (string= buffer1 buffer2) name)
    )
)

(defun tests (file-name-companies file-name-spaceships)
    (format t "Lab 5~%")
    (let ((companies-check (select file-name-companies :company))
          (spaceships-check (select file-name-spaceships :spaceship))
          (companies-data nil)
          (spaceships-data nil)
          (filtered-companies-1 nil)
          (filtered-companies-2 nil)
          (filtered-companies-hash nil))
        (setq companies-data (funcall companies-check))
        (check-output (lambda () (print-data companies-data :company)) "test1")
        (setq spaceships-data (funcall spaceships-check))
        (check-output (lambda () (print-data spaceships-data :spaceship)) "test2")
        (check-output (lambda () (print-spaceship 1 spaceships-data companies-data)) "test3")
        (check-output (lambda () (print-spaceship 4 spaceships-data companies-data)) "test4")
        (check-output (lambda () (print-spaceship 20 spaceships-data companies-data)) "test5")
        (check-output (lambda () (print-company 1 companies-data spaceships-data)) "test6")
        (check-output (lambda () (print-company 9 companies-data spaceships-data)) "test7")
        (check-output (lambda () (print-company 20 companies-data spaceships-data)) "test8")
        (setq filtered-companies-1 (funcall companies-check :start 5 :end 12))
        (setq filtered-companies-2 (funcall companies-check :start 5 :end 12
                    :assoc-pos (acons :type "Private" nil)
                    :assoc-neg (acons :country "New Zealand" nil)))
        (check-output (lambda () (print-data filtered-companies-1 :company :text "Filtered companies 1:")) "test9")
        (setq filtered-companies-1 (add-row filtered-companies-1 '(13 "Company 13" "Australia" "Private" "2023") :company))
        (setq filtered-companies-1 (add-row filtered-companies-1 '(13 "Company 14" "Australia" "Private" "2023") :company))
        (setq filtered-companies-1 (delete-row filtered-companies-1 7 :company))
        (setq filtered-companies-1 (delete-row filtered-companies-1 16 :company))
        (check-output (lambda () (print-data filtered-companies-1 :company :text "Filtered companies 1:")) "test10")
        (check-output (lambda () (print-data filtered-companies-2 :company :text "Filtered companies 2:")) "test11")
        (save-data filtered-companies-1 "./filtered-companies-1.csv" :company)
        (check-saved-file "./filtered-companies-1.csv" "test12")
        (save-data filtered-companies-2 "./filtered-companies-2.csv" :company)
        (check-saved-file "./filtered-companies-2.csv" "test13")
        (setq filtered-companies-hash (convert-assoc-hash filtered-companies-1))
        (check-output (lambda () (print-data-hash filtered-companies-hash :company :text "Filtered companies hash:")) "test14")
))

(tests "./companies.csv" "./spaceships.csv")
